// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id        Int       @id @default(autoincrement()) // Primary key
  path      String    @unique
  name      String?    
  createdAt DateTime  @default(now()) // Automatically set timestamp
  width     Int?
  height    Int?

  logs                  Log[]
  classifications       Classification[]
  transformedImage      TransformedImage?
}

model Log {
  id         Int        @id @default(autoincrement()) // Primary key
  createdAt  DateTime   @default(now()) // Log creation timestamp
  finishedAt DateTime?  // When the log is completed (nullable)
  status     String     // Status of the log (e.g., 'pending', 'completed', 'failed')

  imageId    Int        // Foreign key to the Image model
  image      Image      @relation(fields: [imageId], references: [id]) // A log belongs to an image
}

model Classification {
  id         Int        @id @default(autoincrement()) // Primary key
  createdAt  DateTime   @default(now()) // Log creation timestamp
  label      String     
  score      Float     

  imageId    Int        // Foreign key to the Image model
  image      Image      @relation(fields: [imageId], references: [id]) // A log belongs to an image
}

model TransformedImage {
  id          Int        @id @default(autoincrement()) // Primary key
  createdAt   DateTime   @default(now()) // Log creation timestamp

  width                 Float?     
  height                Float?    
  size                  Float?
  path                  String
  name                  String?
  watermarkText         String?
  filterType            String?
  filterValue           String?

  imageId    Int        @unique()
  image      Image      @relation(fields: [imageId], references: [id]) // A log belongs to an image
}
