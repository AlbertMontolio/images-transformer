// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  STARTED
  COMPLETED
  ERROR
}

model Project {
  id        Int       @id @default(autoincrement()) // Primary key
  name      String?
  status    Status
  createdAt DateTime  @default(now()) // Automatically set timestamp
  finishedAt DateTime?

  image     Image[]
}

model Image {
  id        Int       @id @default(autoincrement()) // Primary key
  path      String?    
  name      String    @unique 
  createdAt DateTime  @default(now()) // Automatically set timestamp

  size      Float? 
  width     Float?
  height    Float?

  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id])

  logs                  Log[]
  categorizations       Categorization[]
  transformedImage      TransformedImage?
  detectedObjects       DetectedObject[]
}

model Log {
  id                Int           @id @default(autoincrement())
  
  status            Status // Using enum for status
  processName       String        // Keeping this as String for flexibility

  createdAt         DateTime      @default(now())
  
  imageId           Int
  image             Image         @relation(fields: [imageId], references: [id])

  @@index([imageId])
  @@index([status])
  @@index([processName])
  @@unique([imageId, processName, status])
}

model Categorization {
  id         Int        @id @default(autoincrement()) // Primary key
  createdAt  DateTime   @default(now()) // Log creation timestamp
  label      String     
  score      Float     

  imageId    Int        // Foreign key to the Image model
  image      Image      @relation(fields: [imageId], references: [id]) // A log belongs to an image
}

model DetectedObject {
  id          Int        @id @default(autoincrement()) // Primary key
  createdAt   DateTime   @default(now()) // Log creation timestamp

  x           Float     
  y           Float     
  width       Float
  height      Float
  
  class       String
  score       Float

  imageId     Int        // Foreign key to the Image model
  image       Image      @relation(fields: [imageId], references: [id]) // A log belongs to an image
}

model TransformedImage {
  id          Int        @id @default(autoincrement()) // Primary key
  createdAt   DateTime   @default(now()) // Log creation timestamp

  width                 Float?     
  height                Float?    
  size                  Float?
  path                  String
  name                  String?
  watermarkText         String?
  filterType            String?
  filterValue           String?

  imageId    Int        @unique()
  image      Image      @relation(fields: [imageId], references: [id]) // A log belongs to an image
}
