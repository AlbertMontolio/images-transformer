version: '3.8'

# Combined environment configuration
x-common-env: &common-env
  # Postgres configuration
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_USER: albertmontolio
  POSTGRES_PASSWORD: 123456
  POSTGRES_DB: images-transformer-db
  DATABASE_URL: "postgresql://albertmontolio:123456@postgres:5432/images-transformer-db"
  # Container folders
  CONTAINER_INPUT_FOLDER: /usr/src/app/input_images
  CONTAINER_OUTPUT_FOLDER: /usr/src/app/output_images
  # Redis configuration
  REDIS_HOST: redis
  REDIS_PORT: 6379

x-common-volumes: &common-volumes
  - ${HOST_INPUT_FOLDER}:/usr/src/app/input_images
  - ${HOST_OUTPUT_FOLDER}:/usr/src/app/output_images

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node_app
    restart: always
    ports:
      - "3000:3000"
    environment:
      <<: *common-env
    volumes: *common-volumes
    depends_on:
      - postgres
      - redis
    command: node dist/main.js

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: prisma_migrate
    entrypoint: ["npx", "prisma", "migrate", "deploy"]
    environment:
      DATABASE_URL: "postgresql://albertmontolio:123456@postgres:5432/images-transformer-db"
    depends_on:
      - app
      - postgres

  postgres:
    image: postgres:14
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: albertmontolio
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: images-transformer-db
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: redis_queue
    restart: always
    ports:
      - "6379:6379"

  categorize_image_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: categorize_image_worker
    restart: always
    command: ["node", "dist/image/infraestructure/workers/categorize-image.worker.js"]
    volumes: *common-volumes
    environment:
      <<: *common-env
    depends_on:
      - app
      - redis
      - postgres

  transform_image_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: transform_image_worker
    restart: always
    command: ["node", "dist/image/infraestructure/workers/transform-image.worker.js"]
    volumes: *common-volumes
    environment:
      <<: *common-env
    depends_on:
      - app
      - redis
      - postgres

  detect_image_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: detect_image_worker
    restart: always
    command: ["node", "dist/image/infraestructure/workers/detect-image.worker.js"]
    volumes: *common-volumes
    environment:
      <<: *common-env
    depends_on:
      - app
      - redis
      - postgres

volumes:
  db_data:
